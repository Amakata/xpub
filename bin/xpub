#!/usr/bin/env ruby

require 'bundler/setup'

require 'rainbow/ext/string'
require 'open3'
require 'optparse'
require 'fileutils'
require 'pathname'
require 'shellwords'
require 'erb'
require 'time'
require 'singleton'
require 'levenshtein'

require 'xpub/version.rb'

option = {}
opt = OptionParser.new do |o|
  o.version = Xpub::VERSION
  o.summary_indent = ' ' * 4
  o.banner = 'Usage: xpub [cmd] [options]'
  o.on_head('[cmd]',
            '    init    Xpubファイルの生成',
            '    build   ビルド',
            '    clean   テンポラリフォルダと出力フォルダをクリア',
            '    check   ソースコードを検証')
  o.on('-v', '出力を詳細にする') { |v| option[:v] = v }
  o.on('--book=VALUE', 'ビルドするbookを指定する') { |v| option[:book] = v }
  o.on('--builder=VALUE', 'ビルドするbuilderを指定する') { |v| option[:builder] = v }
  o.on('--checker=VALUE', 'チェックするcheckerを指定する') { |v| option[:checker] = v }
  o.on('--pandoc-json-output', 'ビルド時にpandocのjsonを出力') { |v| option['pandoc-json-output'] = v }
  o.permute!(ARGV)
end

cur_dir = Dir.getwd

unless File.file?("#{cur_dir}/Xpub") || ARGV[0] == 'init'
  puts "File does not exist. #{cur_dir}/Xpub".color :red
  exit
end

$LOAD_PATH.unshift "#{cur_dir}/lib"
$LOAD_PATH.unshift File.dirname(__FILE__) + '/../lib'

require 'xpub/dsl_accessor'
require 'xpub/dsl/book'
require 'xpub/dsl/src_file'
require 'xpub/dsl/builder'
require 'xpub/dsl/page'
require 'xpub/dsl/checker'

load "#{cur_dir}/Xpub" if File.file?("#{cur_dir}/Xpub") && ARGV[0] != 'init'

if ARGV.length != 1
  puts opt.help
  exit
elsif ARGV[0] == 'build'
  puts 'build...'.color :green
  Xpub::BookManager.instance.build option
elsif ARGV[0] == 'clean'
  puts 'clean...'.color :green
  FileUtils.remove_entry_secure("#{cur_dir}/tmp")
  Dir.mkdir("#{cur_dir}/tmp")
  FileUtils.remove_entry_secure("#{cur_dir}/output")
  Dir.mkdir("#{cur_dir}/output")
elsif ARGV[0] == 'init'
  if File.file?("#{cur_dir}/Xpub")
    puts "File exist. #{cur_dir}/Xpub".color :red
    exit
  end
  puts 'init...'.color :green
  FileUtils.cp_r(Dir.glob(File.dirname(__FILE__) + '/../skel/*'), './')
elsif ARGV[0] == 'check'
  puts 'check...'.color :green
  Xpub::BookManager.instance.check option
else
  puts opt.help
  exit
end
